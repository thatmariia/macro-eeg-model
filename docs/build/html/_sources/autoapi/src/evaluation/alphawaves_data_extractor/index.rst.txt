src.evaluation.alphawaves_data_extractor
========================================

.. py:module:: src.evaluation.alphawaves_data_extractor


Classes
-------

.. autoapisummary::

   src.evaluation.alphawaves_data_extractor.AlphaWavesDataExtractor


Module Contents
---------------

.. py:class:: AlphaWavesDataExtractor(fs, frequencies)

   A class to extract and process EEG data from the AlphaWaves dataset.

   .. attribute:: fs

      Sampling frequency in Hz.

      :type: int

   .. attribute:: dataset

      An instance of the AlphaWaves dataset.

      :type: AlphaWaves

   .. attribute:: subjects

      List of subjects in the AlphaWaves dataset.

      :type: list

   .. attribute:: channels_collections

      Dictionary categorizing channels into different brain regions.

      :type: dict

   .. attribute:: _frequencies

      Frequency range for filtering the EEG signal.

      :type: tuple

   .. attribute:: _channels_all

      List of all EEG channels available in the dataset.

      :type: list

   .. attribute:: _electrode_positions

      Dictionary mapping EEG channels to their 3D positions.

      :type: dict

   .. attribute:: _subject_epochs

      Cache for storing epochs data for each subject.

      :type: dict


   .. py:method:: __init__(fs, frequencies)

      Initializes the AlphaWavesDataExtractor with the specified sampling frequency and frequency range.

      :param fs: Sampling frequency in Hz.
      :type fs: int
      :param frequencies: Frequency range (low, high) for filtering the EEG signal.
      :type frequencies: tuple



   .. py:method:: _get_event_data_per_subject(subject_id, laplacian_spline=True)

      Retrieves and preprocesses the EEG data for a specific subject.

      :param subject_id: The ID of the subject to retrieve data for.
      :type subject_id: int
      :param laplacian_spline: Whether to apply the Laplacian Spline spatial filter (default is True).
      :type laplacian_spline: bool, optional

      :returns: The preprocessed epochs object for the subject.
      :rtype: mne.Epochs



   .. py:method:: _get_time_series_per_subject_channel_event(subject_event_data=None, subject_id=None, channel='Oz', event='closed')

      Extracts time-series data for a specific channel and event.

      :param subject_event_data: The preprocessed epochs data for a subject (default is None).
                                 If not provided, the data will be retrieved using :py:meth:`_get_event_data_per_subject`.
      :type subject_event_data: mne.Epochs, optional
      :param subject_id: The ID of the subject to retrieve data for (default is None).
      :type subject_id: int, optional
      :param channel: The EEG channel to extract data from (default is 'Oz').
      :type channel: str, optional
      :param event: The event type ('closed' or 'open') (default is 'closed').
      :type event: str, optional

      :returns: Time-series data for the specified channel and event.
      :rtype: np.ndarray

      :raises AssertionError: If both `subject_event_data` and `subject_id` are not provided.
          One of them must be provided to retrieve the data.



   .. py:method:: _get_psd_per_subject_channel_event(subject_event_data=None, subject_id=None, channel='Oz', event='closed')

      Computes the Power Spectral Density (PSD) for a specific channel and event.

      :param subject_event_data: The preprocessed epochs data for a subject (default is None).
      :type subject_event_data: mne.Epochs, optional
      :param subject_id: The ID of the subject to retrieve data for (default is None).
      :type subject_id: int, optional
      :param channel: The EEG channel to compute PSD for (default is 'Oz').
      :type channel: str, optional
      :param event: The event type ('closed' or 'open') (default is 'closed').
      :type event: str, optional

      :returns: Frequencies and PSD values for the specified channel and event.
      :rtype: tuple



   .. py:method:: get_time_series_per_subject_collection_event(subject_id, channels_collection, event='closed')

      Extracts the data for a specific channel using
      :py:meth:`_get_time_series_per_subject_channel_event` and computes
      the PSD using :py:meth:`_get_psd_per_subject_channel_event`.
      It then averages the time-series and PSD over a collection of channels for a
      specific subject and event.

      :param subject_id: The ID of the subject to retrieve data for.
      :type subject_id: int
      :param channels_collection: List of EEG channels to include in the analysis.
      :type channels_collection: list
      :param event: The event type ('closed' or 'open') (default is 'closed').
      :type event: str, optional

      :returns: Averaged time-series, frequency values, and averaged PSD for the specified collection of channels and event.
      :rtype: tuple



